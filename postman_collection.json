{
  "info": {
    "_postman_id": "bank-reconciliation-api",
    "name": "Bank Reconciliation API",
    "description": "Complete API collection for testing the Bank Reconciliation System",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{access_token}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [""]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [""]
      }
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8000",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Obtain JWT Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    const jsonData = pm.response.json();",
                  "    pm.environment.set(\"access_token\", jsonData.access);",
                  "    pm.environment.set(\"refresh_token\", jsonData.refresh);",
                  "    console.log(\"Tokens saved to environment\");",
                  "}",
                  "",
                  "pm.test(\"Response has access token\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('access');",
                  "    pm.expect(jsonData).to.have.property('refresh');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"admin\",\n  \"password\": \"admin123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/token/",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "token", ""]
            },
            "description": "Obtain JWT access and refresh tokens for API authentication"
          },
          "response": []
        },
        {
          "name": "Refresh Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    const jsonData = pm.response.json();",
                  "    pm.environment.set(\"access_token\", jsonData.access);",
                  "    console.log(\"Access token refreshed\");",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refresh\": \"{{refresh_token}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/token/refresh/",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "token", "refresh", ""]
            },
            "description": "Refresh the JWT access token using the refresh token"
          },
          "response": []
        }
      ],
      "description": "Authentication endpoints for JWT tokens"
    },
    {
      "name": "Bank Transactions",
      "item": [
        {
          "name": "List All Transactions",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has transactions\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('results');",
                  "    pm.expect(jsonData.results).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Response has pagination\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('count');",
                  "    pm.expect(jsonData).to.have.property('next');",
                  "    pm.expect(jsonData).to.have.property('previous');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/bank/transactions/",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "bank", "transactions", ""]
            },
            "description": "Get paginated list of all bank transactions"
          },
          "response": []
        },
        {
          "name": "List Unmatched Transactions",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"All transactions are unmatched\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    jsonData.results.forEach(function(transaction) {",
                  "        pm.expect(transaction.is_matched).to.eql(false);",
                  "    });",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/bank/unmatched/",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "bank", "unmatched", ""]
            },
            "description": "Get list of unmatched bank transactions"
          },
          "response": []
        },
        {
          "name": "Filter Transactions by Amount",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"All transactions meet amount criteria\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    jsonData.results.forEach(function(transaction) {",
                  "        pm.expect(parseFloat(transaction.amount)).to.be.at.least(1000);",
                  "    });",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/bank/transactions/?amount_min=1000",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "bank", "transactions", ""],
              "query": [
                {
                  "key": "amount_min",
                  "value": "1000"
                }
              ]
            },
            "description": "Filter transactions with minimum amount"
          },
          "response": []
        }
      ],
      "description": "Bank transaction management endpoints"
    },
    {
      "name": "File Upload",
      "item": [
        {
          "name": "Upload Bank Statement CSV",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Upload response contains task_id\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('task_id');",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const jsonData = pm.response.json();",
                  "    pm.environment.set(\"last_task_id\", jsonData.task_id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "src": "sample_data/sample_bank_transactions.csv",
                  "description": "Bank statement CSV file"
                },
                {
                  "key": "file_type",
                  "value": "bank_statement",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/api/v1/bank/upload/",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "bank", "upload", ""]
            },
            "description": "Upload bank statement CSV file for processing"
          },
          "response": []
        },
        {
          "name": "Upload Invoice CSV",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Upload response contains task_id\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('task_id');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "src": "sample_data/sample_invoices.csv",
                  "description": "Invoice CSV file"
                },
                {
                  "key": "file_type",
                  "value": "invoice",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/api/v1/bank/upload/",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "bank", "upload", ""]
            },
            "description": "Upload invoice CSV file"
          },
          "response": []
        }
      ],
      "description": "File upload endpoints for bank statements and invoices"
    },
    {
      "name": "Customers & Invoices",
      "item": [
        {
          "name": "List Customers",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has customers\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('results');",
                  "    pm.expect(jsonData.results).to.be.an('array');",
                  "});",
                  "",
                  "if (pm.response.json().results.length > 0) {",
                  "    const firstCustomer = pm.response.json().results[0];",
                  "    pm.environment.set(\"sample_customer_id\", firstCustomer.id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/bank/customers/",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "bank", "customers", ""]
            },
            "description": "Get list of all customers"
          },
          "response": []
        },
        {
          "name": "List Invoices",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has invoices\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('results');",
                  "    pm.expect(jsonData.results).to.be.an('array');",
                  "});",
                  "",
                  "if (pm.response.json().results.length > 0) {",
                  "    const firstInvoice = pm.response.json().results[0];",
                  "    pm.environment.set(\"sample_invoice_id\", firstInvoice.id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/bank/invoices/",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "bank", "invoices", ""]
            },
            "description": "Get list of all invoices"
          },
          "response": []
        },
        {
          "name": "Get Invoice Details",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has invoice details\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('invoice_number');",
                  "    pm.expect(jsonData).to.have.property('customer');",
                  "    pm.expect(jsonData).to.have.property('total_amount');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/bank/invoices/{{sample_invoice_id}}/",
              "host": ["{{base_url}}"],
              "path": [
                "api",
                "v1",
                "bank",
                "invoices",
                "{{sample_invoice_id}}",
                ""
              ]
            },
            "description": "Get detailed information about a specific invoice"
          },
          "response": []
        }
      ],
      "description": "Customer and invoice management endpoints"
    },
    {
      "name": "Reconciliation",
      "item": [
        {
          "name": "Manual Reconciliation",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Reconciliation successful\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData.message).to.include('reconciled');",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// This script sets up sample IDs for reconciliation",
                  "// In a real scenario, you would get these from previous API calls",
                  "if (!pm.environment.get(\"sample_transaction_id\")) {",
                  "    console.log(\"Please run 'List All Transactions' first to set sample_transaction_id\");",
                  "}",
                  "if (!pm.environment.get(\"sample_invoice_id\")) {",
                  "    console.log(\"Please run 'List Invoices' first to set sample_invoice_id\");",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"invoice_id\": \"{{sample_invoice_id}}\",\n  \"confidence_score\": 0.95,\n  \"notes\": \"Manual reconciliation via Postman API test\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/bank/reconcile/{{sample_transaction_id}}/",
              "host": ["{{base_url}}"],
              "path": [
                "api",
                "v1",
                "bank",
                "reconcile",
                "{{sample_transaction_id}}",
                ""
              ]
            },
            "description": "Manually reconcile a bank transaction with an invoice"
          },
          "response": []
        },
        {
          "name": "List Reconciliation Logs",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has logs\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('results');",
                  "    pm.expect(jsonData.results).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/bank/logs/",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "bank", "logs", ""]
            },
            "description": "Get list of all reconciliation logs and activities"
          },
          "response": []
        }
      ],
      "description": "Reconciliation and logging endpoints"
    },
    {
      "name": "ML Models",
      "item": [
        {
          "name": "List ML Model Versions",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has model versions\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('results');",
                  "    pm.expect(jsonData.results).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/bank/ml-models/",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "bank", "ml-models", ""]
            },
            "description": "Get list of ML model versions and their performance metrics"
          },
          "response": []
        }
      ],
      "description": "Machine Learning model endpoints"
    },
    {
      "name": "Reports & Summaries",
      "item": [
        {
          "name": "List Reconciliation Summaries",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has summaries\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('results');",
                  "    pm.expect(jsonData.results).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/bank/summaries/",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "bank", "summaries", ""]
            },
            "description": "Get list of reconciliation summaries and reports"
          },
          "response": []
        }
      ],
      "description": "Reporting and summary endpoints"
    },
    {
      "name": "API Health & Info",
      "item": [
        {
          "name": "API Schema",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is valid OpenAPI schema\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('openapi');",
                  "    pm.expect(jsonData).to.have.property('info');",
                  "    pm.expect(jsonData).to.have.property('paths');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/schema/",
              "host": ["{{base_url}}"],
              "path": ["api", "schema", ""]
            },
            "description": "Get the OpenAPI schema for the API"
          },
          "response": []
        }
      ],
      "description": "API health and information endpoints"
    }
  ]
}
