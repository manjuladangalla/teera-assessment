{
  "info": {
    "_postman_id": "bank-reconciliation-complete",
    "name": "Bank Reconciliation System - Complete API Collection",
    "description": "Complete collection of endpoints for the bank reconciliation system with JWT authentication, background tasks via Redis/Celery, and ML-powered matching",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "2.0.0"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{access_token}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "exec": [
          "// Auto-refresh token if needed",
          "if (!pm.globals.get('access_token') || pm.globals.get('token_expires') < Date.now()) {",
          "    console.log('Getting fresh JWT token...');",
          "    ",
          "    const tokenRequest = {",
          "        url: pm.environment.get('base_url') + '/api/auth/token/',",
          "        method: 'POST',",
          "        header: {",
          "            'Content-Type': 'application/json'",
          "        },",
          "        body: {",
          "            mode: 'raw',",
          "            raw: JSON.stringify({",
          "                username: pm.environment.get('username'),",
          "                password: pm.environment.get('password')",
          "            })",
          "        }",
          "    };",
          "    ",
          "    pm.sendRequest(tokenRequest, (err, response) => {",
          "        if (err) {",
          "            console.error('Token request failed:', err);",
          "        } else if (response.code === 200) {",
          "            const data = response.json();",
          "            pm.globals.set('access_token', data.access);",
          "            pm.globals.set('refresh_token', data.refresh);",
          "            pm.globals.set('token_expires', Date.now() + 3600000); // 1 hour",
          "            console.log('JWT token refreshed successfully');",
          "        } else {",
          "            console.error('Token request failed:', response.text());",
          "        }",
          "    });",
          "}"
        ],
        "type": "text/javascript"
      }
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8000",
      "type": "string"
    },
    {
      "key": "username",
      "value": "demo",
      "type": "string"
    },
    {
      "key": "password",
      "value": "demo123",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Get JWT Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test for successful authentication",
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has access token', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('access');",
                  "    pm.expect(responseJson).to.have.property('refresh');",
                  "    ",
                  "    // Store tokens for use in other requests",
                  "    pm.globals.set('access_token', responseJson.access);",
                  "    pm.globals.set('refresh_token', responseJson.refresh);",
                  "    pm.globals.set('token_expires', Date.now() + 3600000); // 1 hour",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"{{username}}\",\n    \"password\": \"{{password}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/api/auth/token/",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "token", ""]
            },
            "description": "Get JWT access and refresh tokens for authentication"
          }
        },
        {
          "name": "Refresh JWT Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Token refresh successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('New access token received', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('access');",
                  "    ",
                  "    // Update stored token",
                  "    pm.globals.set('access_token', responseJson.access);",
                  "    pm.globals.set('token_expires', Date.now() + 3600000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"refresh\": \"{{refresh_token}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/api/auth/token/refresh/",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "token", "refresh", ""]
            },
            "description": "Refresh JWT access token using refresh token"
          }
        },
        {
          "name": "Verify JWT Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Token verification successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Token is valid', function () {",
                  "    // 200 status means token is valid",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"token\": \"{{access_token}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/api/auth/token/verify/",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "token", "verify", ""]
            },
            "description": "Verify that JWT access token is valid"
          }
        }
      ],
      "description": "Authentication endpoints for JWT tokens"
    },
    {
      "name": "1. Upload Bank Statement",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Upload successful', function () {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "pm.test('Response contains upload details', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson).to.have.property('id');",
              "    pm.expect(responseJson).to.have.property('filename');",
              "    pm.expect(responseJson).to.have.property('status');",
              "    ",
              "    // Store upload ID for reference",
              "    pm.globals.set('last_upload_id', responseJson.id);",
              "});",
              "",
              "pm.test('Processing status is valid', function () {",
              "    const responseJson = pm.response.json();",
              "    const validStatuses = ['uploaded', 'processing', 'completed', 'failed'];",
              "    pm.expect(validStatuses).to.include(responseJson.status);",
              "});"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "// Note: Upload a real CSV file with bank transactions",
              "// Expected format: date,description,amount,type",
              "// Example: 2024-01-15,Office Supplies,150.00,debit",
              "console.log('Ready to upload bank statement CSV file');"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{access_token}}"
          }
        ],
        "body": {
          "mode": "formdata",
          "formdata": [
            {
              "key": "file",
              "type": "file",
              "src": [],
              "description": "CSV file containing bank transactions"
            },
            {
              "key": "file_type",
              "value": "bank_statement",
              "type": "text",
              "description": "Type of file being uploaded"
            }
          ]
        },
        "url": {
          "raw": "{{base_url}}/api/v1/bank/upload/",
          "host": ["{{base_url}}"],
          "path": ["api", "v1", "bank", "upload", ""]
        },
        "description": "Upload a CSV file containing bank transactions for processing. The file will be processed in the background by Celery workers."
      }
    },
    {
      "name": "2. Get Unmatched Transactions",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response is valid array or paginated results', function () {",
              "    const responseJson = pm.response.json();",
              "    ",
              "    // Check if it's paginated (DRF format) or direct array",
              "    if (responseJson.results) {",
              "        pm.expect(responseJson.results).to.be.an('array');",
              "        pm.expect(responseJson).to.have.property('count');",
              "    } else {",
              "        pm.expect(responseJson).to.be.an('array');",
              "    }",
              "});",
              "",
              "pm.test('Transactions have required fields', function () {",
              "    const responseJson = pm.response.json();",
              "    const transactions = responseJson.results || responseJson;",
              "    ",
              "    if (transactions.length > 0) {",
              "        const transaction = transactions[0];",
              "        pm.expect(transaction).to.have.property('id');",
              "        pm.expect(transaction).to.have.property('amount');",
              "        pm.expect(transaction).to.have.property('description');",
              "        pm.expect(transaction).to.have.property('status');",
              "        pm.expect(transaction.status).to.equal('unmatched');",
              "        ",
              "        // Store first transaction ID for reconciliation test",
              "        pm.globals.set('sample_transaction_id', transaction.id);",
              "    }",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{access_token}}"
          }
        ],
        "url": {
          "raw": "{{base_url}}/api/v1/bank/unmatched/?limit=50",
          "host": ["{{base_url}}"],
          "path": ["api", "v1", "bank", "unmatched", ""],
          "query": [
            {
              "key": "limit",
              "value": "50",
              "description": "Number of results to return"
            }
          ]
        },
        "description": "Get all unmatched bank transactions that need reconciliation"
      }
    },
    {
      "name": "3. Reconcile Transactions",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Reconciliation successful', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response contains reconciliation details', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson).to.have.property('success');",
              "    pm.expect(responseJson.success).to.be.true;",
              "    ",
              "    if (responseJson.reconciliation_logs) {",
              "        pm.expect(responseJson.reconciliation_logs).to.be.an('array');",
              "    }",
              "});",
              "",
              "pm.test('Transaction status updated', function () {",
              "    const responseJson = pm.response.json();",
              "    if (responseJson.transaction_status) {",
              "        const validStatuses = ['matched', 'partially_matched'];",
              "        pm.expect(validStatuses).to.include(responseJson.transaction_status);",
              "    }",
              "});"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "// Note: Replace transaction_id and invoice_ids with actual values",
              "console.log('Make sure to update transaction_id and invoice_ids in the request body');"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{access_token}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"transaction_ids\": [\"{{sample_transaction_id}}\"],\n    \"operation\": \"trigger_ml_matching\",\n    \"notes\": \"Manual reconciliation via Postman\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{base_url}}/api/v1/bank/reconcile/",
          "host": ["{{base_url}}"],
          "path": ["api", "v1", "bank", "reconcile", ""]
        },
        "description": "Manually reconcile one or more bank transactions with invoices"
      }
    },
    {
      "name": "4. Get Reconciliation Logs",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response contains logs', function () {",
              "    const responseJson = pm.response.json();",
              "    ",
              "    // Check if it's paginated or direct array",
              "    if (responseJson.results) {",
              "        pm.expect(responseJson.results).to.be.an('array');",
              "        pm.expect(responseJson).to.have.property('count');",
              "    } else {",
              "        pm.expect(responseJson).to.be.an('array');",
              "    }",
              "});",
              "",
              "pm.test('Logs have required fields', function () {",
              "    const responseJson = pm.response.json();",
              "    const logs = responseJson.results || responseJson;",
              "    ",
              "    if (logs.length > 0) {",
              "        const log = logs[0];",
              "        pm.expect(log).to.have.property('id');",
              "        pm.expect(log).to.have.property('matched_by');",
              "        pm.expect(log).to.have.property('confidence_score');",
              "        pm.expect(log).to.have.property('created_at');",
              "    }",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{access_token}}"
          }
        ],
        "url": {
          "raw": "{{base_url}}/api/v1/bank/logs/?limit=50&ordering=-created_at",
          "host": ["{{base_url}}"],
          "path": ["api", "v1", "bank", "logs", ""],
          "query": [
            {
              "key": "limit",
              "value": "50",
              "description": "Number of results to return"
            },
            {
              "key": "ordering",
              "value": "-created_at",
              "description": "Order by creation date (newest first)"
            }
          ]
        },
        "description": "View reconciliation logs and audit trail"
      }
    },
    {
      "name": "5. Generate Summary Report",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Request accepted', function () {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "pm.test('Response contains task information', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson).to.have.property('summary_id');",
              "    pm.expect(responseJson).to.have.property('message');",
              "    ",
              "    // Store summary ID for checking status",
              "    if (responseJson.task_id) {",
              "        pm.globals.set('report_task_id', responseJson.task_id);",
              "    }",
              "    pm.globals.set('summary_id', responseJson.summary_id);",
              "});",
              "",
              "pm.test('Message indicates report generation', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson.message).to.include('report');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{access_token}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"format_type\": \"minimal\",\n    \"start_date\": \"2024-01-01\",\n    \"end_date\": \"2024-12-31\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{base_url}}/api/v1/bank/summary/",
          "host": ["{{base_url}}"],
          "path": ["api", "v1", "bank", "summary", ""]
        },
        "description": "Generate reconciliation summary report. Uses Celery background tasks when Redis is available, or returns immediate response when not."
      }
    }
  ]
}
